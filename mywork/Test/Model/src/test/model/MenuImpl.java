package test.model;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 21 23:15:48 ICT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MenuImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        Id,
        Name,
        DisplaySequence,
        Shortcut,
        Icon,
        MenuItems;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ID = AttributesEnum.Id.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int DISPLAYSEQUENCE = AttributesEnum.DisplaySequence.index();
    public static final int SHORTCUT = AttributesEnum.Shortcut.index();
    public static final int ICON = AttributesEnum.Icon.index();
    public static final int MENUITEMS = AttributesEnum.MenuItems.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MenuImpl() {
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("test.model.Menu");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }
    /**
    * Sets value as the attribute value for Email.
    * @param value value to set the Email
    */
    public void setName(String value) {
    boolean updateAllowed = true;
    //Read the UPDATE_CHECK_ENFORCED property
    //for the Email field
    String nameUpdateCheckEnforced =
    (String)getDefinitionObject()
    .getAttributeDef(NAME).getProperty("Property");
    //If the UPDATE_CHECK_ENFORCED is added to
    //the attribute, then call
    //custom isEmailUpdatable() to check if update is allowed.
    //Call to isEmailUpdatable() may be expensive and
    //we are doing it selectively using custom property.
    if (("true".equals(nameUpdateCheckEnforced))) {
        updateAllowed = true;
    }
    if (updateAllowed)
        setAttributeInternal(NAME, value+"xxxxxx");
    }
}

